//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BillingWeb
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Billing4Entities : DbContext
    {
        public Billing4Entities()
            : base("name=Billing4Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblDeliveryMode> tblDeliveryModes { get; set; }
        public virtual DbSet<tblDeliveryNote> tblDeliveryNotes { get; set; }
        public virtual DbSet<tblDeliveryNoteItem> tblDeliveryNoteItems { get; set; }
        public virtual DbSet<tblInventory> tblInventories { get; set; }
        public virtual DbSet<tblInventoryItem> tblInventoryItems { get; set; }
        public virtual DbSet<tblInvoice> tblInvoices { get; set; }
        public virtual DbSet<tblInvoiceItem> tblInvoiceItems { get; set; }
        public virtual DbSet<tblMeasurementUnit> tblMeasurementUnits { get; set; }
        public virtual DbSet<tblPaymentMode> tblPaymentModes { get; set; }
        public virtual DbSet<tblProduct> tblProducts { get; set; }
        public virtual DbSet<tblProductCategory> tblProductCategories { get; set; }
        public virtual DbSet<tblProductSubCategory> tblProductSubCategories { get; set; }
        public virtual DbSet<tblQuotation> tblQuotations { get; set; }
        public virtual DbSet<tblQuotationItem> tblQuotationItems { get; set; }
        public virtual DbSet<tblRole> tblRoles { get; set; }
        public virtual DbSet<tblSize> tblSizes { get; set; }
        public virtual DbSet<tblStock> tblStocks { get; set; }
        public virtual DbSet<tblTax> tblTaxes { get; set; }
        public virtual DbSet<tblUnit> tblUnits { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
    
        public virtual int Delete_DeliveryNote(Nullable<int> deliveryNoteID, Nullable<int> updatedBy)
        {
            var deliveryNoteIDParameter = deliveryNoteID.HasValue ?
                new ObjectParameter("DeliveryNoteID", deliveryNoteID) :
                new ObjectParameter("DeliveryNoteID", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_DeliveryNote", deliveryNoteIDParameter, updatedByParameter);
        }
    
        public virtual int Delete_Inventory(Nullable<int> inventoryID, Nullable<int> updatedBy)
        {
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Inventory", inventoryIDParameter, updatedByParameter);
        }
    
        public virtual int Delete_Invoice(Nullable<int> invoice, Nullable<int> updatedBy)
        {
            var invoiceParameter = invoice.HasValue ?
                new ObjectParameter("Invoice", invoice) :
                new ObjectParameter("Invoice", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Invoice", invoiceParameter, updatedByParameter);
        }
    
        public virtual int Delete_Product(Nullable<int> productID, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, ObjectParameter check)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Product", productIDParameter, updatedOnParameter, updatedByParameter, check);
        }
    
        public virtual int Delete_ProductCategory(Nullable<int> productCategoryID, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, ObjectParameter check)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_ProductCategory", productCategoryIDParameter, updatedOnParameter, updatedByParameter, check);
        }
    
        public virtual int Delete_ProductSubCategory(Nullable<int> productSubCategoryID, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, ObjectParameter check)
        {
            var productSubCategoryIDParameter = productSubCategoryID.HasValue ?
                new ObjectParameter("ProductSubCategoryID", productSubCategoryID) :
                new ObjectParameter("ProductSubCategoryID", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_ProductSubCategory", productSubCategoryIDParameter, updatedOnParameter, updatedByParameter, check);
        }
    
        public virtual int Delete_Quotation(Nullable<int> quotationID, Nullable<int> updatedBy)
        {
            var quotationIDParameter = quotationID.HasValue ?
                new ObjectParameter("QuotationID", quotationID) :
                new ObjectParameter("QuotationID", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Quotation", quotationIDParameter, updatedByParameter);
        }
    
        public virtual int Delete_Size(Nullable<int> sizeID, Nullable<int> updatedBy, ObjectParameter check)
        {
            var sizeIDParameter = sizeID.HasValue ?
                new ObjectParameter("SizeID", sizeID) :
                new ObjectParameter("SizeID", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Size", sizeIDParameter, updatedByParameter, check);
        }
    
        public virtual int Delete_Tax(Nullable<int> taxID, Nullable<int> updatedBy, ObjectParameter check)
        {
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Tax", taxIDParameter, updatedByParameter, check);
        }
    
        public virtual int Delete_tblStock(Nullable<int> stockID, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, ObjectParameter check)
        {
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("StockID", stockID) :
                new ObjectParameter("StockID", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_tblStock", stockIDParameter, updatedOnParameter, updatedByParameter, check);
        }
    
        public virtual int Delete_Unit(Nullable<int> unitID, Nullable<int> updatedBy, ObjectParameter check)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Unit", unitIDParameter, updatedByParameter, check);
        }
    
        public virtual ObjectResult<Get_Product_Result> Get_Product()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Product_Result>("Get_Product");
        }
    
        public virtual int Get_UserDetails(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_UserDetails", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<GetAll_DeliveryMode_Result> GetAll_DeliveryMode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_DeliveryMode_Result>("GetAll_DeliveryMode");
        }
    
        public virtual ObjectResult<GetAll_DeliveryNote_Result> GetAll_DeliveryNote(Nullable<int> deliveryNoteID)
        {
            var deliveryNoteIDParameter = deliveryNoteID.HasValue ?
                new ObjectParameter("DeliveryNoteID", deliveryNoteID) :
                new ObjectParameter("DeliveryNoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_DeliveryNote_Result>("GetAll_DeliveryNote", deliveryNoteIDParameter);
        }
    
        public virtual int GetAll_DeliveryNoteItem(Nullable<int> deliveryNoteID, Nullable<int> deliveryNoteItemID)
        {
            var deliveryNoteIDParameter = deliveryNoteID.HasValue ?
                new ObjectParameter("DeliveryNoteID", deliveryNoteID) :
                new ObjectParameter("DeliveryNoteID", typeof(int));
    
            var deliveryNoteItemIDParameter = deliveryNoteItemID.HasValue ?
                new ObjectParameter("DeliveryNoteItemID", deliveryNoteItemID) :
                new ObjectParameter("DeliveryNoteItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAll_DeliveryNoteItem", deliveryNoteIDParameter, deliveryNoteItemIDParameter);
        }
    
        public virtual int GetAll_DeliveryNoteItem_Report(Nullable<int> deliveryNoteID, Nullable<int> deliveryNoteItemID)
        {
            var deliveryNoteIDParameter = deliveryNoteID.HasValue ?
                new ObjectParameter("DeliveryNoteID", deliveryNoteID) :
                new ObjectParameter("DeliveryNoteID", typeof(int));
    
            var deliveryNoteItemIDParameter = deliveryNoteItemID.HasValue ?
                new ObjectParameter("DeliveryNoteItemID", deliveryNoteItemID) :
                new ObjectParameter("DeliveryNoteItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAll_DeliveryNoteItem_Report", deliveryNoteIDParameter, deliveryNoteItemIDParameter);
        }
    
        public virtual ObjectResult<GetAll_Inventory_Result> GetAll_Inventory(Nullable<int> inventoryID)
        {
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_Inventory_Result>("GetAll_Inventory", inventoryIDParameter);
        }
    
        public virtual int GetAll_InventoryItem(Nullable<int> inventoryID, Nullable<int> inventoryItemID)
        {
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(int));
    
            var inventoryItemIDParameter = inventoryItemID.HasValue ?
                new ObjectParameter("InventoryItemID", inventoryItemID) :
                new ObjectParameter("InventoryItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAll_InventoryItem", inventoryIDParameter, inventoryItemIDParameter);
        }
    
        public virtual int GetAll_InventoryItem_Report(Nullable<int> inventoryID, Nullable<int> inventoryItemID)
        {
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(int));
    
            var inventoryItemIDParameter = inventoryItemID.HasValue ?
                new ObjectParameter("InventoryItemID", inventoryItemID) :
                new ObjectParameter("InventoryItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAll_InventoryItem_Report", inventoryIDParameter, inventoryItemIDParameter);
        }
    
        public virtual ObjectResult<GetAll_Invoice_Result> GetAll_Invoice(Nullable<int> invoiceID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_Invoice_Result>("GetAll_Invoice", invoiceIDParameter);
        }
    
        public virtual int GetAll_InvoiceItem(Nullable<int> invoiceID, Nullable<int> invoiceItemID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var invoiceItemIDParameter = invoiceItemID.HasValue ?
                new ObjectParameter("InvoiceItemID", invoiceItemID) :
                new ObjectParameter("InvoiceItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAll_InvoiceItem", invoiceIDParameter, invoiceItemIDParameter);
        }
    
        public virtual int GetAll_InvoiceItem_Report(Nullable<int> invoiceID, Nullable<int> invoiceItemID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var invoiceItemIDParameter = invoiceItemID.HasValue ?
                new ObjectParameter("InvoiceItemID", invoiceItemID) :
                new ObjectParameter("InvoiceItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAll_InvoiceItem_Report", invoiceIDParameter, invoiceItemIDParameter);
        }
    
        public virtual ObjectResult<GetAll_PaymentMode_Result> GetAll_PaymentMode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_PaymentMode_Result>("GetAll_PaymentMode");
        }
    
        public virtual int GetAll_PaymentModeItem(Nullable<int> paymentModeID, Nullable<int> paymentModeItemID)
        {
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var paymentModeItemIDParameter = paymentModeItemID.HasValue ?
                new ObjectParameter("PaymentModeItemID", paymentModeItemID) :
                new ObjectParameter("PaymentModeItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAll_PaymentModeItem", paymentModeIDParameter, paymentModeItemIDParameter);
        }
    
        public virtual ObjectResult<GetAll_Product_Result> GetAll_Product(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_Product_Result>("GetAll_Product", productIDParameter);
        }
    
        public virtual ObjectResult<GetAll_ProductCategory_Result> GetAll_ProductCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_ProductCategory_Result>("GetAll_ProductCategory");
        }
    
        public virtual ObjectResult<GetAll_ProductSubCategory_Result> GetAll_ProductSubCategory(Nullable<int> productSubCategoryID, Nullable<int> productCategoryID)
        {
            var productSubCategoryIDParameter = productSubCategoryID.HasValue ?
                new ObjectParameter("ProductSubCategoryID", productSubCategoryID) :
                new ObjectParameter("ProductSubCategoryID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_ProductSubCategory_Result>("GetAll_ProductSubCategory", productSubCategoryIDParameter, productCategoryIDParameter);
        }
    
        public virtual ObjectResult<GetAll_ProductSubCategoryWithProductCategory_Result> GetAll_ProductSubCategoryWithProductCategory(Nullable<int> productSubCategoryID)
        {
            var productSubCategoryIDParameter = productSubCategoryID.HasValue ?
                new ObjectParameter("ProductSubCategoryID", productSubCategoryID) :
                new ObjectParameter("ProductSubCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_ProductSubCategoryWithProductCategory_Result>("GetAll_ProductSubCategoryWithProductCategory", productSubCategoryIDParameter);
        }
    
        public virtual ObjectResult<GetAll_Quotation_Result> GetAll_Quotation(Nullable<int> quotationID)
        {
            var quotationIDParameter = quotationID.HasValue ?
                new ObjectParameter("QuotationID", quotationID) :
                new ObjectParameter("QuotationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_Quotation_Result>("GetAll_Quotation", quotationIDParameter);
        }
    
        public virtual int GetAll_Quotation_Report(Nullable<int> quotationID, Nullable<int> quotationItemID)
        {
            var quotationIDParameter = quotationID.HasValue ?
                new ObjectParameter("QuotationID", quotationID) :
                new ObjectParameter("QuotationID", typeof(int));
    
            var quotationItemIDParameter = quotationItemID.HasValue ?
                new ObjectParameter("QuotationItemID", quotationItemID) :
                new ObjectParameter("QuotationItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAll_Quotation_Report", quotationIDParameter, quotationItemIDParameter);
        }
    
        public virtual int GetAll_QuotationItem(Nullable<int> quotationID, Nullable<int> quotationItemID)
        {
            var quotationIDParameter = quotationID.HasValue ?
                new ObjectParameter("QuotationID", quotationID) :
                new ObjectParameter("QuotationID", typeof(int));
    
            var quotationItemIDParameter = quotationItemID.HasValue ?
                new ObjectParameter("QuotationItemID", quotationItemID) :
                new ObjectParameter("QuotationItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAll_QuotationItem", quotationIDParameter, quotationItemIDParameter);
        }
    
        public virtual ObjectResult<GetAll_Size_Result> GetAll_Size(Nullable<int> sizeID, Nullable<int> unitID)
        {
            var sizeIDParameter = sizeID.HasValue ?
                new ObjectParameter("SizeID", sizeID) :
                new ObjectParameter("SizeID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_Size_Result>("GetAll_Size", sizeIDParameter, unitIDParameter);
        }
    
        public virtual ObjectResult<GetAll_Stock_Result> GetAll_Stock(Nullable<int> stockID)
        {
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("StockID", stockID) :
                new ObjectParameter("StockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_Stock_Result>("GetAll_Stock", stockIDParameter);
        }
    
        public virtual ObjectResult<GetAll_Tax_Result> GetAll_Tax(Nullable<int> taxID)
        {
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_Tax_Result>("GetAll_Tax", taxIDParameter);
        }
    
        public virtual ObjectResult<GetAll_Unit_Result> GetAll_Unit(Nullable<int> unitID)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_Unit_Result>("GetAll_Unit", unitIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetMax_Inventory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetMax_Inventory");
        }
    
        public virtual ObjectResult<Nullable<int>> GetMax_Invoice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetMax_Invoice");
        }
    
        public virtual int InsertUpdate_Product(Nullable<int> productID, Nullable<int> productCategoryID, Nullable<int> productSubCategoryID, string productName, string productDescription, string make, string unit, Nullable<int> taxID, Nullable<int> sizeID, Nullable<decimal> ratePerUnit, string discount, string remark, Nullable<System.DateTime> updatedOn, Nullable<int> createdBy, Nullable<int> updatedBy, Nullable<int> unitID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var productSubCategoryIDParameter = productSubCategoryID.HasValue ?
                new ObjectParameter("ProductSubCategoryID", productSubCategoryID) :
                new ObjectParameter("ProductSubCategoryID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("ProductDescription", productDescription) :
                new ObjectParameter("ProductDescription", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var sizeIDParameter = sizeID.HasValue ?
                new ObjectParameter("SizeID", sizeID) :
                new ObjectParameter("SizeID", typeof(int));
    
            var ratePerUnitParameter = ratePerUnit.HasValue ?
                new ObjectParameter("RatePerUnit", ratePerUnit) :
                new ObjectParameter("RatePerUnit", typeof(decimal));
    
            var discountParameter = discount != null ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdate_Product", productIDParameter, productCategoryIDParameter, productSubCategoryIDParameter, productNameParameter, productDescriptionParameter, makeParameter, unitParameter, taxIDParameter, sizeIDParameter, ratePerUnitParameter, discountParameter, remarkParameter, updatedOnParameter, createdByParameter, updatedByParameter, unitIDParameter);
        }
    
        public virtual int InsertUpdate_ProductCategory(Nullable<int> productCategoryID, string categoryName, string description, Nullable<int> hSN_SAC, Nullable<System.DateTime> updatedOn, Nullable<int> createdBy, Nullable<int> updatedBy)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var hSN_SACParameter = hSN_SAC.HasValue ?
                new ObjectParameter("HSN_SAC", hSN_SAC) :
                new ObjectParameter("HSN_SAC", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdate_ProductCategory", productCategoryIDParameter, categoryNameParameter, descriptionParameter, hSN_SACParameter, updatedOnParameter, createdByParameter, updatedByParameter);
        }
    
        public virtual int InsertUpdate_ProductSubCategory(Nullable<int> productSubCategoryID, Nullable<int> productCategoryID, string subCategoryName, string description, Nullable<System.DateTime> updatedOn, Nullable<int> createdBy, Nullable<int> updatedBy)
        {
            var productSubCategoryIDParameter = productSubCategoryID.HasValue ?
                new ObjectParameter("ProductSubCategoryID", productSubCategoryID) :
                new ObjectParameter("ProductSubCategoryID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var subCategoryNameParameter = subCategoryName != null ?
                new ObjectParameter("SubCategoryName", subCategoryName) :
                new ObjectParameter("SubCategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdate_ProductSubCategory", productSubCategoryIDParameter, productCategoryIDParameter, subCategoryNameParameter, descriptionParameter, updatedOnParameter, createdByParameter, updatedByParameter);
        }
    
        public virtual int InsertUpdate_Size(Nullable<int> sizeID, string sizeName, string sizeDescription, Nullable<int> createdBy, Nullable<int> unitID)
        {
            var sizeIDParameter = sizeID.HasValue ?
                new ObjectParameter("SizeID", sizeID) :
                new ObjectParameter("SizeID", typeof(int));
    
            var sizeNameParameter = sizeName != null ?
                new ObjectParameter("SizeName", sizeName) :
                new ObjectParameter("SizeName", typeof(string));
    
            var sizeDescriptionParameter = sizeDescription != null ?
                new ObjectParameter("SizeDescription", sizeDescription) :
                new ObjectParameter("SizeDescription", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdate_Size", sizeIDParameter, sizeNameParameter, sizeDescriptionParameter, createdByParameter, unitIDParameter);
        }
    
        public virtual int InsertUpdate_Tax(Nullable<int> taxID, string taxName, Nullable<decimal> taxPercentage, string description, Nullable<System.DateTime> effectiveFrom, Nullable<int> createdBy)
        {
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var taxNameParameter = taxName != null ?
                new ObjectParameter("TaxName", taxName) :
                new ObjectParameter("TaxName", typeof(string));
    
            var taxPercentageParameter = taxPercentage.HasValue ?
                new ObjectParameter("TaxPercentage", taxPercentage) :
                new ObjectParameter("TaxPercentage", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var effectiveFromParameter = effectiveFrom.HasValue ?
                new ObjectParameter("EffectiveFrom", effectiveFrom) :
                new ObjectParameter("EffectiveFrom", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdate_Tax", taxIDParameter, taxNameParameter, taxPercentageParameter, descriptionParameter, effectiveFromParameter, createdByParameter);
        }
    
        public virtual int InsertUpdate_Unit(Nullable<int> unitID, string name, string description, Nullable<int> createdBy)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdate_Unit", unitIDParameter, nameParameter, descriptionParameter, createdByParameter);
        }
    
        public virtual ObjectResult<sp_GetMonthlyInventoryReprot_Result> sp_GetMonthlyInventoryReprot(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMonthlyInventoryReprot_Result>("sp_GetMonthlyInventoryReprot", fromDateParameter, todateParameter);
        }
    
        public virtual ObjectResult<sp_GetMonthlyInvoiceReprot_Result> sp_GetMonthlyInvoiceReprot(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMonthlyInvoiceReprot_Result>("sp_GetMonthlyInvoiceReprot", fromDateParameter, todateParameter);
        }
    
        public virtual ObjectResult<sp_GetMonthlytblDeliveryNoteReport_Result> sp_GetMonthlytblDeliveryNoteReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMonthlytblDeliveryNoteReport_Result>("sp_GetMonthlytblDeliveryNoteReport", fromDateParameter, todateParameter);
        }
    
        public virtual ObjectResult<sp_GetMonthlytblQuotationReport_Result> sp_GetMonthlytblQuotationReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMonthlytblQuotationReport_Result>("sp_GetMonthlytblQuotationReport", fromDateParameter, todateParameter);
        }
    
        public virtual int spDeliveryNote_DeliveryNoteEntrySave(string deliveryNoteXML, string deliveryNoteItemXML, Nullable<int> modifiedBy, Nullable<int> deliveryNoteID)
        {
            var deliveryNoteXMLParameter = deliveryNoteXML != null ?
                new ObjectParameter("DeliveryNoteXML", deliveryNoteXML) :
                new ObjectParameter("DeliveryNoteXML", typeof(string));
    
            var deliveryNoteItemXMLParameter = deliveryNoteItemXML != null ?
                new ObjectParameter("DeliveryNoteItemXML", deliveryNoteItemXML) :
                new ObjectParameter("DeliveryNoteItemXML", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var deliveryNoteIDParameter = deliveryNoteID.HasValue ?
                new ObjectParameter("DeliveryNoteID", deliveryNoteID) :
                new ObjectParameter("DeliveryNoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeliveryNote_DeliveryNoteEntrySave", deliveryNoteXMLParameter, deliveryNoteItemXMLParameter, modifiedByParameter, deliveryNoteIDParameter);
        }
    
        public virtual int spInventory_InventoryEntrySave(string inventoryXML, string inventoryItemXML, Nullable<int> modifiedBy, Nullable<int> inventoryID)
        {
            var inventoryXMLParameter = inventoryXML != null ?
                new ObjectParameter("InventoryXML", inventoryXML) :
                new ObjectParameter("InventoryXML", typeof(string));
    
            var inventoryItemXMLParameter = inventoryItemXML != null ?
                new ObjectParameter("InventoryItemXML", inventoryItemXML) :
                new ObjectParameter("InventoryItemXML", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInventory_InventoryEntrySave", inventoryXMLParameter, inventoryItemXMLParameter, modifiedByParameter, inventoryIDParameter);
        }
    
        public virtual int spInventory_InventoryEntrySave_23Oct2017(string inventoryXML, string inventoryItemXML, Nullable<int> modifiedBy, Nullable<int> inventoryID)
        {
            var inventoryXMLParameter = inventoryXML != null ?
                new ObjectParameter("InventoryXML", inventoryXML) :
                new ObjectParameter("InventoryXML", typeof(string));
    
            var inventoryItemXMLParameter = inventoryItemXML != null ?
                new ObjectParameter("InventoryItemXML", inventoryItemXML) :
                new ObjectParameter("InventoryItemXML", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInventory_InventoryEntrySave_23Oct2017", inventoryXMLParameter, inventoryItemXMLParameter, modifiedByParameter, inventoryIDParameter);
        }
    
        public virtual int spInventory_InventoryEntrySave_29Oct2017(string inventoryXML, string inventoryItemXML, Nullable<int> modifiedBy, Nullable<int> inventoryID)
        {
            var inventoryXMLParameter = inventoryXML != null ?
                new ObjectParameter("InventoryXML", inventoryXML) :
                new ObjectParameter("InventoryXML", typeof(string));
    
            var inventoryItemXMLParameter = inventoryItemXML != null ?
                new ObjectParameter("InventoryItemXML", inventoryItemXML) :
                new ObjectParameter("InventoryItemXML", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInventory_InventoryEntrySave_29Oct2017", inventoryXMLParameter, inventoryItemXMLParameter, modifiedByParameter, inventoryIDParameter);
        }
    
        public virtual int spInvoice_InvoiceEntrySave(string invoiceXML, string invoiceItemXML, Nullable<int> modifiedBy, Nullable<int> invoiceID)
        {
            var invoiceXMLParameter = invoiceXML != null ?
                new ObjectParameter("invoiceXML", invoiceXML) :
                new ObjectParameter("invoiceXML", typeof(string));
    
            var invoiceItemXMLParameter = invoiceItemXML != null ?
                new ObjectParameter("invoiceItemXML", invoiceItemXML) :
                new ObjectParameter("invoiceItemXML", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("invoiceID", invoiceID) :
                new ObjectParameter("invoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInvoice_InvoiceEntrySave", invoiceXMLParameter, invoiceItemXMLParameter, modifiedByParameter, invoiceIDParameter);
        }
    
        public virtual int spInvoice_InvoiceEntrySave_23Oc2017(string invoiceXML, string invoiceItemXML, Nullable<int> modifiedBy, Nullable<int> invoiceID)
        {
            var invoiceXMLParameter = invoiceXML != null ?
                new ObjectParameter("invoiceXML", invoiceXML) :
                new ObjectParameter("invoiceXML", typeof(string));
    
            var invoiceItemXMLParameter = invoiceItemXML != null ?
                new ObjectParameter("invoiceItemXML", invoiceItemXML) :
                new ObjectParameter("invoiceItemXML", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("invoiceID", invoiceID) :
                new ObjectParameter("invoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInvoice_InvoiceEntrySave_23Oc2017", invoiceXMLParameter, invoiceItemXMLParameter, modifiedByParameter, invoiceIDParameter);
        }
    
        public virtual int spInvoice_InvoiceEntrySave_29Oct2017(string invoiceXML, string invoiceItemXML, Nullable<int> modifiedBy, Nullable<int> invoiceID)
        {
            var invoiceXMLParameter = invoiceXML != null ?
                new ObjectParameter("invoiceXML", invoiceXML) :
                new ObjectParameter("invoiceXML", typeof(string));
    
            var invoiceItemXMLParameter = invoiceItemXML != null ?
                new ObjectParameter("invoiceItemXML", invoiceItemXML) :
                new ObjectParameter("invoiceItemXML", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("invoiceID", invoiceID) :
                new ObjectParameter("invoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInvoice_InvoiceEntrySave_29Oct2017", invoiceXMLParameter, invoiceItemXMLParameter, modifiedByParameter, invoiceIDParameter);
        }
    
        public virtual int spQuotation_QuotationEntrySave(string quotationXML, string quotationItemXML, Nullable<int> modifiedBy, Nullable<int> quotationID)
        {
            var quotationXMLParameter = quotationXML != null ?
                new ObjectParameter("QuotationXML", quotationXML) :
                new ObjectParameter("QuotationXML", typeof(string));
    
            var quotationItemXMLParameter = quotationItemXML != null ?
                new ObjectParameter("QuotationItemXML", quotationItemXML) :
                new ObjectParameter("QuotationItemXML", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var quotationIDParameter = quotationID.HasValue ?
                new ObjectParameter("QuotationID", quotationID) :
                new ObjectParameter("QuotationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spQuotation_QuotationEntrySave", quotationXMLParameter, quotationItemXMLParameter, modifiedByParameter, quotationIDParameter);
        }
    
        public virtual int spStock_StockEntrySave(Nullable<int> stockID, Nullable<int> productID, string make, Nullable<decimal> quantity, Nullable<int> unitID, Nullable<int> sizeID, Nullable<decimal> ratePerUnit, Nullable<int> taxID, Nullable<decimal> tax, Nullable<decimal> taxAmount, Nullable<decimal> discount, Nullable<decimal> discountAmount, Nullable<decimal> totalAmount, string remark, Nullable<int> createdBy)
        {
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("StockID", stockID) :
                new ObjectParameter("StockID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var sizeIDParameter = sizeID.HasValue ?
                new ObjectParameter("SizeID", sizeID) :
                new ObjectParameter("SizeID", typeof(int));
    
            var ratePerUnitParameter = ratePerUnit.HasValue ?
                new ObjectParameter("RatePerUnit", ratePerUnit) :
                new ObjectParameter("RatePerUnit", typeof(decimal));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(decimal));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spStock_StockEntrySave", stockIDParameter, productIDParameter, makeParameter, quantityParameter, unitIDParameter, sizeIDParameter, ratePerUnitParameter, taxIDParameter, taxParameter, taxAmountParameter, discountParameter, discountAmountParameter, totalAmountParameter, remarkParameter, createdByParameter);
        }
    
        public virtual int usp_ChangePassword(string userName, string newPassword)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ChangePassword", userNameParameter, newPasswordParameter);
        }
    
        public virtual int usp_MonthlyStockReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, Nullable<int> productID, string make)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MonthlyStockReport", fromDateParameter, todateParameter, productIDParameter, makeParameter);
        }
    }
}
